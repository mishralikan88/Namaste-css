/** ------------------------------------- -->
/**  UNITS IN CSS 
/** ---------------------------------------- -->


/* 

Absolute Lengths -

üëâ Fixed units (do not change).
üëâ Always the same size no matter screen or device.
üëâ Examples: px, cm, in.
üëâ Use when you want exact size (e.g., border 1px).

Relative Lengths -

üëâ Size depends on something else (like parent or root).
üëâ Scales better across screens (more flexible).
üëâ Examples: em, rem, %, vw, vh.
üëâ Use for responsive design. 

*/

/*? Pixels (px): px is an absolute unit of measurement in CSS, representing the smallest unit of screen space.
It provides a fixed and consistent size on all devices and screens. */

/*? Percentages (%): Percentages are relative units based on the parent element's size or the containing block.
Widely used in creating responsive layouts.
Example: width: 50%; sets an element's width to 50% of its parent's width. */

/*? Em (em): em is a relative unit that is calculated based on the font size of the parent element.
When you set an element's size in em, it's relative to the font size of its nearest parent with a specified font size. */

/*? Root Em (rem): rem is also a relative unit like em, but it's based on the font size of the root (html) element.
Using rem ensures that the size is consistent throughout the entire document, making it especially useful for responsive design. */

/** ------------------------------------- -->
/**  IMPORTANT TIPS + NOTES
/** ---------------------------------------- -->

/*? px provides fixed sizes and is not recommended for responsive design as it doesn't adapt to different screen sizes and font settings. However, it can be useful for precise control over small elements. */

/*? em is useful for relative sizing within the context of the parent element's font size. It allows for more flexible and scalable designs. */

/*? rem is the preferred choice for responsive design as it offers a consistent relative size based on the root font size. It's easier to maintain and provides better scalability. */

/** ---------------------------------------- --> */

body {
  background-color: hsl(0, 0%, 94%);
}

/*? for Pixels  */

/* h1 {
  font-size: 54px;
  color: purple;
} */

/* p {
  font-size: 36px;
}

li {
  font-size: 44px;
} */

/*? for Percentages  100% = 16px  */

/* 1px = 6.25% */

/* h1 {
  font-size: 337.5%;
}

p {
  font-size: 225%;
}

li {
  font-size: 275%; -> 44px
} */

/*? for 1 em  = 16px */

h1 {
  font-size: 3.374em;
}

p {
  font-size: 2.25em;
}


.parent {
  font-size: 10px;
}

/* 1em = 10px */

li {
  font-size: 2.75em;
   /* 27.5px now , not 44px because size is relative to parent class style. */
}




/* ‚ùì Question:
By default, 1rem = 16px in CSS. 
Can we change 1rem to equal 10px? If yes, why would we do that?

‚úÖ Answer:
Yes, we can. 
We change it by targeting the root element (`html`) and setting the font-size.

Example:
html {
  font-size: 62.5%;   // 62.5% of 16px = 10px
}

Now 1rem = 10px.
So if you need 54px, you can simply write 5.4rem.

üëâ This makes calculations easier and more consistent across the project. */





html {
  font-size: 62.5%;
}

/* 1rem = 10px ; */

h1 {
  font-size: 5.4rem;
}

p {
  font-size: 3.6rem;
}

/* .parent {
  font-size: 20px;
} */

li {
  font-size: 4.4rem;
}

/** ------------------------------------- -->
/**  INTERVIEW QUESTIONS
/** ---------------------------------------- -->

/*? 1: What is the main difference between em and rem units in CSS? */

/*? 2: How does using rem units in your CSS benefit a responsive web design?  ‚≠ê‚≠ê‚≠ê */

/*? 3: Can you explain how the font-size property in em units works when nested within parent elements with different font sizes? */
